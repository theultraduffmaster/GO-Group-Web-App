// Code generated by go-bindata.
// sources:
// templates/call.tmpl
// templates/function.tmpl
// templates/header.tmpl
// templates/inline.tmpl
// templates/inputs.tmpl
// templates/message.tmpl
// templates/results.tmpl
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCallTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8e\xe1\x8a\xc2\x40\x0c\x84\x5f\x25\x94\xfe\xb8\x83\x92\x07\x38\xb8\x07\xb8\x3f\x87\xa8\xe8\xef\x65\x9b\xd6\x40\x5d\x25\x8d\x8a\x84\xbc\xbb\xbb\xa5\xba\xbf\x02\x33\x5f\x66\xc6\xac\xa7\x81\x13\x41\x13\xc3\x34\x35\xee\x66\x0f\xd6\x13\xe0\x96\x22\xf1\x9d\xa4\x28\x3c\x40\xba\x28\xe0\xdf\xbc\x53\xb9\x45\x75\x57\x45\x33\x4a\x7d\x71\xdf\x24\xa0\x7b\x55\xf1\x3f\x9c\xc9\xfd\xcb\x4c\x42\x1a\x09\x5a\xee\xa0\xa5\x09\x7e\x7e\x01\x37\x41\xb2\xa9\x24\xf3\x9a\xde\xb2\x7b\x07\x9f\xdf\xda\x77\x14\xd6\xb2\x21\xf7\x05\x19\xe7\x1a\xbf\x44\x94\xc6\x85\xc6\xfd\xf3\x4a\x19\x3f\x04\xe1\xd0\x73\xcc\x43\xb0\xb2\xcb\xf9\x5e\xef\x2b\x00\x00\xff\xff\x65\x08\xbc\x88\xf1\x00\x00\x00")

func templatesCallTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCallTmpl,
		"templates/call.tmpl",
	)
}

func templatesCallTmpl() (*asset, error) {
	bytes, err := templatesCallTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/call.tmpl", size: 241, mode: os.FileMode(420), modTime: time.Unix(1478623510, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\x4d\x4f\xe4\x38\x10\x3d\x77\xff\x8a\xa2\x05\xa8\xb3\x0a\xe6\x0e\xe2\xb0\x08\x76\xb5\x87\xa5\x47\x0d\x1a\x0e\xa3\xd1\xc8\xa4\x2b\x3d\xd1\x18\xa7\xc7\x76\x40\x28\xca\x7f\x9f\xb2\xe3\x24\xce\x17\xc3\x65\x38\xd0\x71\xd9\x55\xf5\xea\xd5\x2b\x27\x65\xb9\xc3\x34\x93\x08\xab\xb4\x90\x89\xc9\x72\xb9\xaa\xaa\x65\x59\x9e\xc1\x71\x0a\x17\x57\xc0\x68\xb5\xb4\x5b\x50\x96\xec\x01\xb5\xb9\xe3\xcf\x58\x55\x6b\x03\x7f\x19\x5a\x65\x72\xcf\x1e\x22\x28\x97\x0b\xeb\xf2\x9a\x99\xef\xc0\xb6\x98\x60\xf6\x82\x8a\x3c\x17\xce\x9c\xa5\xc0\xfe\xd3\xf7\x46\x15\x89\x71\xc6\xd6\xfa\x4f\x86\x62\xa7\x6b\xdb\xc2\xbc\x1d\x10\x52\x67\x01\xed\x0e\xdb\xb8\xfe\xb4\xe2\x72\x8f\x03\x07\xda\x70\x6b\x0b\xd2\xc1\xa3\x00\x7e\xcb\xba\xa0\xdc\xf9\x55\x9b\xb3\x31\x05\xcf\x83\x47\x8b\xca\x96\xf9\x89\x2b\x2a\xd4\xa0\x72\xc9\x1c\x34\xae\xf6\x3d\x60\x01\xac\xb1\x87\x4b\xe8\x4c\x23\x74\x41\xc6\x7e\x7e\x4b\xa8\xb6\xa4\x7f\xf9\x1a\xa4\x91\x14\xd5\xa6\x25\xaa\xbd\xf3\x04\xcd\x0d\x76\x2e\x77\x1d\xd7\x03\xba\x3c\xb5\xf5\x4f\xcb\x88\xd0\x1d\x67\x4d\xc8\x31\xa1\x33\xe4\xbd\x43\xd9\x62\xe1\xf8\xb2\xff\x26\x7c\x02\xde\xb6\xa8\x0b\x61\x74\x93\xe7\x91\x4b\xf3\x1e\x65\x6d\xca\x2d\x9a\x42\x49\x7d\xab\x54\xee\x39\x78\x25\x57\x5a\xc2\x53\x9e\x8b\x01\xcf\x96\xc8\xf3\x73\x78\xd8\xdc\x6c\x2e\xe0\xef\xdd\x0e\x2c\xd7\x90\x70\x8d\x9a\xb9\x36\xa4\xb9\xa2\x8c\x14\x57\xe6\xc6\x32\x78\xc7\x7f\x20\xb9\xc2\xb7\x18\x8c\xb1\x3d\x29\x4b\x17\xcb\x23\xaf\x5b\x55\x2e\xc1\xff\x35\xa0\xee\x8b\xa7\x7a\xab\xaa\x0c\xdb\x16\x72\x6d\x0c\xb3\x0d\x8c\xc1\xce\xd0\x70\x6a\xc0\x43\x84\xb3\x8e\xe5\xa9\xe6\xce\x4c\xd1\xa8\x65\x0e\xa6\x6b\x07\x11\xe7\x0e\x73\x8a\x70\xea\xa1\x7b\x42\xd9\x67\x2e\x0a\xa2\xb5\x6c\x42\xcc\x0c\x17\xed\xb0\x7a\xd8\x2f\x88\x02\x56\xcb\x86\x05\x23\x17\x77\x01\xba\x51\x5b\x4c\xcc\xdf\x68\xe1\xf3\x4d\x4c\x4c\x53\xe6\xa3\xca\x4c\x5b\x7d\x6f\x92\xa8\xc6\xd3\xa7\x37\x62\x91\x5d\x17\x69\x8a\xaa\xfc\x48\x42\x3f\x19\x6b\xd7\xdc\x8d\x14\x6f\xa1\x78\xa2\xb1\x7d\x23\xd1\xb1\x14\x41\x8b\xcc\xe0\xf3\x41\x70\x43\x17\xa5\xaa\x05\xbb\xa2\x1b\xd2\xc9\xb4\xdb\x49\xb8\x10\xb5\x79\x0e\xc5\x84\x6a\x17\x64\xae\xbb\x36\x04\x46\xd1\x91\xe4\xec\xba\x3a\x95\xe4\xb2\x15\xe5\xda\x9e\x3b\xba\x02\x99\x89\xc8\xfe\x52\xbf\x9a\x61\xf0\x6d\x36\xcc\x85\x4c\xd7\xab\x30\xd6\x33\x6a\xcd\xf7\xe8\x4b\x41\x7b\x02\xae\xe0\xe4\x25\x86\xc6\xfd\xe4\x65\x15\xf7\xd2\x67\xf2\x50\xb4\xc5\x93\x47\x1c\x24\x8b\x3a\x45\x34\x97\x42\x6f\xba\xdd\xde\x60\x4c\x94\x2b\x98\x0a\x71\x17\x51\x92\x4b\x9a\x8e\x02\x7d\x61\x53\x0a\x7b\x57\x52\xe3\x94\x73\x9a\x72\xac\xff\x9b\x9b\x6e\x70\x5a\x8d\xb1\x7b\x77\xdb\xae\xa3\xcb\xe0\x48\xcd\x6a\x78\x3f\x75\xba\x23\xe8\x3e\xc7\x35\xd7\x59\x12\xbc\x87\xda\xe6\x1e\xa7\x53\xfa\xb2\x43\xd9\xc3\x10\xf2\x2c\xe8\xb5\x3c\x6c\xf4\x87\xf1\xfc\xa1\xfc\x47\x0a\x53\x81\x89\x61\x37\x88\x87\xdb\x9f\x05\x17\xeb\x36\x42\xdc\x07\x14\x85\x88\xda\xee\x7d\x44\x87\x0d\x60\x0f\xf6\x7f\xea\x66\x76\x10\x3d\xb0\x1e\x4f\xa7\xd5\xdf\x08\x75\x16\xe4\xfc\xf7\xc1\x40\xa7\x60\x0b\x0a\xaf\xeb\x6a\x49\x5f\x46\x8d\x4e\x7f\x05\x00\x00\xff\xff\x12\xba\x7c\xa5\x47\x09\x00\x00")

func templatesFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesFunctionTmpl,
		"templates/function.tmpl",
	)
}

func templatesFunctionTmpl() (*asset, error) {
	bytes, err := templatesFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/function.tmpl", size: 2375, mode: os.FileMode(420), modTime: time.Unix(1478624623, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\xca\x48\x4d\x4c\x49\x2d\x52\xaa\xad\xe5\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xa8\xae\xd6\x0b\x80\x30\x81\x82\x5c\x99\xb9\x05\xf9\x45\x25\x0a\x1a\x5c\xd5\xd5\x45\x89\x79\x40\x69\x3d\x4f\xb0\x48\x71\x6d\x2d\x50\xa1\x5f\x62\x2e\x50\x15\x44\x4b\x49\x06\x50\x7d\x75\x75\x6a\x5e\x0a\x90\xd6\x84\xb3\x00\x01\x00\x00\xff\xff\x81\x22\x53\x6f\x6b\x00\x00\x00")

func templatesHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesHeaderTmpl,
		"templates/header.tmpl",
	)
}

func templatesHeaderTmpl() (*asset, error) {
	bytes, err := templatesHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/header.tmpl", size: 107, mode: os.FileMode(420), modTime: time.Unix(1478623510, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInlineTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\xcb\x01\xd2\x4a\xb5\xb5\x0a\xd5\xd5\x25\xa9\xb9\x05\x39\x89\x25\x40\xd1\xe4\xc4\x9c\x1c\x25\x05\x3d\xb0\x68\x6a\x5e\x4a\x6d\x2d\x20\x00\x00\xff\xff\xaa\xeb\x41\xff\x31\x00\x00\x00")

func templatesInlineTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesInlineTmpl,
		"templates/inline.tmpl",
	)
}

func templatesInlineTmpl() (*asset, error) {
	bytes, err := templatesInlineTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/inline.tmpl", size: 49, mode: os.FileMode(420), modTime: time.Unix(1478623510, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInputsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8d\x41\x0a\x02\x31\x0c\x45\xaf\x12\x86\x59\x4a\x0e\x20\x78\x00\x77\x82\x27\xa8\x4c\x3a\x74\x61\x94\xf4\xcf\xea\xd3\xbb\x6b\xab\x8b\xae\x12\x1e\x2f\x2f\xe4\x66\xb9\xb8\xc9\x52\xfc\x7d\xa0\x2e\xad\x91\x6b\x96\xf3\x45\xb4\xaf\x25\x8b\xbf\x20\x7a\x3f\x1e\xb0\x8a\xda\x1a\xa0\x9e\x9e\x76\x12\xd2\x7c\xfb\x3b\x6b\xd6\x5b\x14\xc7\x75\x44\x3a\x8c\xe4\xbb\x0d\x9e\xe2\xab\xc3\xe2\x77\x9b\x62\xaf\x4a\x0e\xda\x5f\x4c\x9d\x79\x7c\x02\x00\x00\xff\xff\x8e\xbc\xcf\xda\x98\x00\x00\x00")

func templatesInputsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesInputsTmpl,
		"templates/inputs.tmpl",
	)
}

func templatesInputsTmpl() (*asset, error) {
	bytes, err := templatesInputsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/inputs.tmpl", size: 152, mode: os.FileMode(420), modTime: time.Unix(1478623510, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMessageTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x3c\x8e\x41\x8a\xc3\x30\x0c\x45\xf7\x73\x0a\x11\x12\x98\x81\x44\x07\x18\x98\x03\xcc\xa6\x94\xb6\x74\xef\x36\x3f\xa9\x21\x71\x53\xdb\x49\x29\x42\x77\xaf\x63\x68\x56\x12\x5f\x4f\x4f\x12\x69\xd1\x59\x07\x2a\x46\x84\x60\x7a\x14\xd4\xa8\x7e\x89\xd8\x8e\xdc\x3d\x12\x1f\xe7\x4b\x44\x88\x41\xb5\x7a\x30\x89\xc0\xb5\xaa\x22\x4f\x1b\x6f\xc4\x07\x5c\x61\x17\xf8\x35\xe1\xd3\x6b\x02\x9f\xcd\x30\x43\x95\x37\x90\x77\x66\x4c\xc1\x77\x36\xf2\xde\x5b\x17\xff\xdd\x34\xaf\x42\x11\x6f\x5c\x0f\x2a\x6d\x4d\x25\x06\xfa\xfd\x4b\x80\xf1\x89\x8f\xf0\x79\x9e\x56\x4a\xab\x5a\x7f\xee\x56\xcb\xe6\xcd\xe5\x27\x3d\xda\x50\x6e\xdf\x01\x00\x00\xff\xff\x90\x2e\xb9\x52\xc9\x00\x00\x00")

func templatesMessageTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesMessageTmpl,
		"templates/message.tmpl",
	)
}

func templatesMessageTmpl() (*asset, error) {
	bytes, err := templatesMessageTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/message.tmpl", size: 201, mode: os.FileMode(420), modTime: time.Unix(1478623510, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResultsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\xcd\x41\x0a\xc2\x40\x0c\x05\xd0\xab\x7c\x4a\x97\xa5\x07\x10\x5c\x8a\x7b\x6f\x20\x34\x95\x81\x92\x81\x3f\xd3\x55\xc8\xdd\x4d\x6a\x51\x70\x35\x93\xfc\x97\xc4\x6c\x91\xb5\xa8\x60\xa0\xb4\x7d\xeb\x6d\x70\x87\x19\x9f\xfa\x12\x8c\x65\xc2\x28\x1b\x2e\x57\xcc\x8f\x4f\xec\x6e\x56\xd6\x48\xdc\xa7\x70\xa2\x4b\x76\xee\xb5\x63\xce\xcf\x59\x87\x88\x81\xbe\x53\xdb\x8d\xac\x4c\x2c\xe4\x99\xe3\x00\x95\xdf\xa5\xff\x38\x0f\xfe\xec\xf1\xbe\x03\x00\x00\xff\xff\xb0\x4f\xcf\x61\xa8\x00\x00\x00")

func templatesResultsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesResultsTmpl,
		"templates/results.tmpl",
	)
}

func templatesResultsTmpl() (*asset, error) {
	bytes, err := templatesResultsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/results.tmpl", size: 168, mode: os.FileMode(420), modTime: time.Unix(1478623510, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/call.tmpl": templatesCallTmpl,
	"templates/function.tmpl": templatesFunctionTmpl,
	"templates/header.tmpl": templatesHeaderTmpl,
	"templates/inline.tmpl": templatesInlineTmpl,
	"templates/inputs.tmpl": templatesInputsTmpl,
	"templates/message.tmpl": templatesMessageTmpl,
	"templates/results.tmpl": templatesResultsTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"call.tmpl": &bintree{templatesCallTmpl, map[string]*bintree{}},
		"function.tmpl": &bintree{templatesFunctionTmpl, map[string]*bintree{}},
		"header.tmpl": &bintree{templatesHeaderTmpl, map[string]*bintree{}},
		"inline.tmpl": &bintree{templatesInlineTmpl, map[string]*bintree{}},
		"inputs.tmpl": &bintree{templatesInputsTmpl, map[string]*bintree{}},
		"message.tmpl": &bintree{templatesMessageTmpl, map[string]*bintree{}},
		"results.tmpl": &bintree{templatesResultsTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

